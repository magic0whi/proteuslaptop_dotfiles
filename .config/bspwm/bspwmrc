#!/bin/bash
## MONITOR ARRANGE START
desktops=(1 2 3 4 5 6 7 8 9 10)
monitors=(eDP-1)
internal_monitor=eDP-1

# Bspwm first run initialization
if [ $1 = 0 ]; then
    bspc monitor $internal_monitor -d ${desktops[@]}
fi

# First check all monitors remains in Bspwm, temporary move all desktops into internal monitor, finally clean the redundant monitors
declare -a Bspwm_monitors=($(bspc query -M --names | tr '\n' ' '))
for monitor in ${Bspwm_monitors[@]}; do
    [ $monitor = $internal_monitor ] && continue

    # Add a temporary desktop because a minimum one desktop is required per monitor
    bspc monitor $monitor -a temp_desktop_${monitor}

    # Move all desktops to internal monitor
    for desktop in $(bspc query -D --names -m $monitor); do
        bspc desktop $desktop -m $internal_monitor
    done

    bspc monitor $monitor -r
    bspc desktop temp_desktop_${monitor} -r


    # Stop Polybar for this monitor before we turn off in the X11
    systemctl --user stop polybar@monitor.service
    # Let XranDR disable disconnected monitors in Bspwm
    #if [ "$(xrandr -q | grep -e "^$monitor disconnected")" ]; then
        xrandr --output $monitor --off
    #fi
done

# Reorder desktops in internal monitor
bspc monitor $internal_monitor -o $(bspc query -D --names -m $internal_monitor | sort -n | tr '\n' ' ')

declare -i each_monitor_desktops=$(echo "scale=0;${#desktops[@]}/$(xrandr -q | grep ' connected' | wc -l)" | bc)
declare -i current_desktop_index=0
declare -a connected_monitors
declare xrandr_parms
for monitor in ${monitors[@]}; do
    # Filter only connected monitors
    if [ "$(xrandr -q | grep -e "^$monitor connected")" ]; then
        # If is internal monitor, set as primary monitor
        [ $monitor = $internal_monitor ] && xrandr_parms+=' --primary'
        # If has monitor[s] on the left already, concatenate it at right
        [ ${#connected_monitors[@]} -gt 0 ] && xrandr_parms+=" --right-of ${connected_monitors[-1]}"
        connected_monitors+=($monitor)
        xrandr --output $monitor --auto $xrandr_parms
        # Don't forget to clean the variable
        unset xrandr_parms

        for ((i=0; i<$each_monitor_desktops; i++)) do
            bspc desktop ${desktops[$current_desktop_index]} -m $monitor
            current_desktop_index=$((current_desktop_index+1))
        done

        # Remove default desktop "Desktop" auto created by bspwm
        bspc desktop Desktop -r 2>/dev/null

        # Start Polybar for this monitor
        systemctl --user --no-block start polybar@$monitor.service
    fi
done

while [ $current_desktop_index -lt ${#desktops[@]} ]; do
    # Arrange remain desktops to the last monitor
    bspc desktop ${desktops[$current_desktop_index]} -m $monitor

    current_desktop_index=$((current_desktop_index+1))
done

# Reorder monitors in Bspwm
bspc wm -O ${connected_monitors[@]}
## MONITOR ARRANGE END

# Touchscreen in multi-head setup
xinput --map-to-output 'GXTP7936:00 27C6:0123' $internal_monitor
# Don't disable touchpad while typing
xinput set-prop 'SYNA2BA6:00 06CB:CF00 Touchpad' 'libinput Disable While Typing Enabled' 0
xrdb -merge $HOME/.Xresources

sxhkd &
feh --no-fehbg --bg-max $HOME/Pictures/kanagawa-inverted-darker.jpg &

# Rules based on the (<WM_CLASS[1]>)[:(<WM_CLASS[0]>)[:(<WM_NAME>], which is the second string within the WM_CLASS property. To determine the class name, run `xprop | grep WM_CLASS`
bspc config border_width         4
bspc config window_gap           10

bspc config split_ratio          0.52
bspc config borderless_monocle   true
bspc config gapless_monocle      true

bspc rule -a Inkscape desktop='^1'
bspc rule -a firefox desktop='^2' state=fullscreen follow=on
bspc rule -a steam desktop='^3' follow=on
bspc rule -a gamescope desktop='^4' state=fullscreen follow=on
bspc rule -a gimp desktop='^8' state=floating follow=on
bspc rule -a mplayer2 state=floating
bspc rule -a kupfer.py focus=on
bspc rule -a screenkey manage=off
bspc rule -a zathura state=tiled
bspc rule -a Anki:anki:Add state=floating

screen_height=$(xrandr -q | head -n1 | awk '{print $10}' | cut -d, -f1)
PiP_height=$(($screen_height / 3))
PiP_width=$(($PiP_height * 2))
bspc rule -a firefox:Toolkit:Picture-in-Picture state=floating sticky=on rectangle=${PiP_width}x$PiP_height

systemd-notify --pid=$(pgrep bspwm) --ready --status="bspwmrc running completed"
